import asyncio
import math
import logging

from berconpy import (
    AsyncRCONClient,
    AsyncRCONClientCache,
    AsyncEventDispatcher,
    AsyncClientConnector,
    LoginFailure,
    RCONError,
    ConnectorConfig,
    AsyncCommander
)

from events import (
    on_message,
    on_player_connect,
    on_player_disconnect,
    on_player_guid,
    on_player_kick,
    on_player_verify_guid,
    on_login
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π ConnectorConfig –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
fast_config = ConnectorConfig(
    run_interval=0.2,
    keep_alive_interval=5.0,
    players_interval=10.0,
    initial_connect_attempts=99999,
    connection_timeout=0.8
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
class CustomClientConnector(AsyncClientConnector):
    def __init__(self, *, config=None, commander=None):
        super().__init__(config=config or ConnectorConfig(), commander=commander)

    async def on_connect(self):
        logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")

    async def on_disconnect(self):
        logging.warning("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")

    async def on_packet_send(self, packet: bytes):
        logging.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: {packet.hex()}")

    async def on_packet_receive(self, packet: bytes):
        logging.debug(f"üì• –ü–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç: {packet.hex()}")

    async def _try_connect(self, password: str, *, first_iteration: bool) -> bool:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        logging.info("‚ö° –ü–æ–ø—ã—Ç–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ (—Ä–µ)–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        self._is_logged_in = asyncio.get_running_loop().create_future()

        attempts = (
            range(self.config.initial_connect_attempts)
            if first_iteration
            else iter(int, 1)  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        )

        for i in attempts:
            if self._close_event.is_set():
                return False

            try:
                timeout = self.config.connection_timeout
                result = await asyncio.wait_for(self.connect(password), timeout=timeout)
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ #{i + 1}")
                return result
            except LoginFailure:
                raise
            except (asyncio.TimeoutError, OSError) as e:
                logging.debug(f"‚è± –ü–æ–ø—ã—Ç–∫–∞ #{i + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                self.disconnect()
                continue

        return False

async def main():
    ip = "80.242.59.185"
    port = 2310
    password = "34sDk35khsku345"

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–µ—Ä–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —Ç–∞–π–º–∏–Ω–≥–∞–º–∏
    fast_commander = AsyncCommander(
        command_attempts=1,
        command_interval=0.3
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–∞–Ω–¥–µ—Ä
    client = AsyncRCONClient(
        cache=AsyncRCONClientCache(),
        dispatch=AsyncEventDispatcher(),
        protocol=CustomClientConnector(config=fast_config, commander=fast_commander)
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    client.add_listener("on_player_connect", on_player_connect)
    client.add_listener("on_player_disconnect", on_player_disconnect)
    client.add_listener("on_player_guid", on_player_guid)
    client.add_listener("on_message", on_message)
    client.add_listener("on_player_kick", on_player_kick)
    client.add_listener("on_player_verify_guid", on_player_verify_guid)
    client.add_listener("on_login", on_login)

    try:
        async with client.connect(ip, port, password):
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
            await asyncio.sleep(math.inf)
    except LoginFailure:
        logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π RCON-–ø–∞—Ä–æ–ª—å.")
    except RCONError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ RCON: {e}")
    except Exception as e:
        logging.exception(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
